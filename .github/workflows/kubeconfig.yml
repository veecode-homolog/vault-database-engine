name: KubeConfig

on:
  workflow_dispatch:
env:
  PORT: 6550
  USERNAME: ec2-user
jobs:
  kubeconfig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Write secret to file
        run: |
          echo "${{ secrets.KEYPAIR }}" > cert.pem
          chmod 600 cert.pem
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Waiting for cluster to be ready
        run: |
          HOST=`aws ec2 describe-instances --filters 'Name=tag:Name,Values=vault-database-engine' --output text --query 'Reservations[*].Instances[*].PublicIpAddress'`
          while ! nc -z $HOST $PORT; do
            echo "waiting for cluster to be ready..."
            sleep 2
          done
          echo "Cluster Ready!"
          echo "Host=$HOST" >> $GITHUB_ENV
      
      - name: Generate kube config with k3d
        run: |
           ssh -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@${{  env.Host }} "k3d kubeconfig get k3s > config"
 
      - name: Download kube config
        run: |
           mkdir -p ~/.kube
           scp -i ./cert.pem -o StrictHostKeyChecking=no $USERNAME@${{ env.Host }}:config ~/.kube/config
 
      - name: Print downloaded config
        run: |  
          CERTIFICATE=`cat  ~/.kube/config |grep certificate-authority-data `
          sed -i "s|$CERTIFICATE|    insecure-skip-tls-verify: true|g" ~/.kube/config
          sed -i "s|0.0.0.0|${{ env.Host }}|g" ~/.kube/config
 
      - name: Upload kube config
        uses: actions/upload-artifact@v3
        with:
          name: kube-config
          path: ~/.kube/config